LIBNAME k "C:/MBD/MyCSVfiles";
* 3.1. Calculate a new mon_purch variable, mon_purch_dol, that is expressed in American $;
data churn; set k.churn; 
mon_purch_dol = mon_purch * 1.15;
run;

* 3.1. Calculate the average amount purchased, avg_mon_purch, per visit;
data churn; set k.churn; 
avg_mon_purch = mon_purch/freq_purch;
run;

* 3.2. Add the snapshot date, January 24 2011 as snapshot_date;
data churn; set k.churn; 
snapshot_date = MDY(1,24,2011);
run;

* 3.3. Create a new id variable, cust_id2, that combines the current cust_id with the churn variable;
data churn; set k.churn; 
cust_id2 = cat(cust_id, churn);
run;

*3.4. Recalculate the age variable, age2, up to today. Do remember that the age was calculated on the snapshot date, January 24 2011;
data churn; set k.churn; 
age2 = floor(age+yrdif(mdy(1,24,2011),today(),'AGE'));
*age2 = int(age+yrdif(mdy(1,24,2011),today(),'AGE'));
run;

* 3.5.-3.6. Relabel the LOS variable, LOS2, create a new variable that takes following values:
LOS >= 100 --> loyal
LOST < 100 --> regular;

data churn; 
format LOS2 $8.; 
set k.churn; 
if LOS >= 100 then LOS2 = "loyal";
else LOS2 = "regular";
run;

* 3.7. Create a new dataset that only contains the customers with the age not missing;
data churn; set k.churn; 
if d_age_missing = 0;
* if d_age_missing = 1 then delete;
run;

* 3.8.-3.9. Add the snapshot date, January 24 2011 as snapshot_date and show it as 24JAN2011;
data churn; 
format snapshot_date date10.;
set k.churn; 
snapshot_date = MDY(1,24,2011);
run;

* 3.10. Calculate the total number of purchases, tot_freq_purch, using the retain statement;
data churn; set k.churn; 
retain tot_freq_purch 0;
tot_freq_purch = tot_freq_purch + freq_purch;
run;

* 3.10. Calculate the total number of purchases, tot_freq_purch, using the sum statement;
data churn; set k.churn; 
tot_freq_purch + freq_purch;
run;

* 3.11. Round the values of age, LOS & rec_complaints by making use of arrays;
data churn (drop = i); set k.churn; 
array round_var (3) age los rec_complaints;
do i = 1 to 3;
	round_var(i) = round(round_var(i));
end;
run;

* 4.2.-4.3. Sort the dataset so the the most loyal customers with the most recent complaints are positioned on top. Keep only the 
customers where age is missing;
proc sort data = k.churn out = churn;
where d_age_missing = 1;
by descending los rec_complaints;
run;

* 4.5. Print the customer ids where age is not missing and having a LOS > 100;
proc print data = k.churn;
where d_age_missing = 0 and LOS > 100;
var cust_id;
run;

* 4.5. Print the total amount of money spent for the churners and non-churners, only for those customers where age is not missing 
and having a LOS > 310;
proc sort data = k.churn out = churn;
by churn; run;

proc print data = churn;
where d_age_missing = 0 and LOS > 310;
by churn;
sum mon_purch;
run;

*4.10-4.11. Calculate summary statistics for the amount of money spent per gender and save the results in dataset mean_out;
proc sort data = k.churn out = churn; 
by d_gender; run;
proc means data = churn;
by d_gender;
var mon_purch;
output out = mean_out;
run;

* 4.12. Create a contingency table that shows the number of females and males that have churned/not churned;
proc freq data = k.churn;
tables d_gender*churn; run;